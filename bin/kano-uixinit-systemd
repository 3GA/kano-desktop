#!/bin/bash

# kano-uixinit-systemd
#
# Copyright (C) 2016 Kano Computing Ltd.
# License: http://www.gnu.org/licenses/gpl-2.0.txt GNU GPL v2
#
#  This script is a wrapper on top of the Kano OS Desktop mode startup.
#  It is meant to be running under the umbrella of a systemd unit file.
#
#  It performs the following tasks:
#
#   * Announces finalisation to kano-init
#   * Sets up the Kano keyboard and hotkeys, mouse calibration
#   * Disables screen power off mode (DPMS)
#   * Triggers event processing for kano-tracker-ctl, kano-sync, kano-updater
#   * Sets up system sound volume
#
#  Logging takes place from systemd itself (journalctl).
#

logger --id --tag "info" "uixinit systemd starts"

# FIXME: is this still needed?
mkdir -p "$HOME/.kano-settings"

function set_keyboard
{
    # Load Kano Keyboard configuration file for Hotkeys, or a generic one for regular keyboards
    keyboard_conf_dir="/usr/share/kano-desktop/config/keyboard"
    if [ "$1" = "True" ]; then
        keyboard_conf="$keyboard_conf_dir/kanokeyboardrc"
    else
        keyboard_conf="$keyboard_conf_dir/generickeyboardrc"
    fi
    logger --id --tag "info" "Launching xbindkeys with configuration: $keyboard_conf"
    /usr/bin/xbindkeys -f $keyboard_conf

    # Set user keyboard layout
    logger --id --tag "info" "Setting the keyboard layout for the user"
    sudo /usr/bin/kano-settings-cli set keyboard --load
}

function track_startup
{
    # Report a startup event to Kano Tracker
    kano-tracker-ctl +1 startup

    if [ is_internet ]; then
        # Try uploading the tracking data to our servers
        # Should be quiet on failure
        kano-sync --upload-tracking-data --silent

        # Sync objects from the content API in the background
        # TODO: This should be removed once we have the daemon done
        sudo kano-content sync &

        kano-tracker-ctl +1 'internet-connection-established'
    fi
}

############ STARTS HERE ############

# Is this the first time we executed this boot?

test -f /run/lock/desktop_init_run
DESKTOP_RUN=$?
touch /run/lock/desktop_init_run
FIRST_BOOT=1

if [ "$DESKTOP_RUN" -eq 1 ] ; then

   logger --id --tag "info" "kano-uixinit-systemd first execution"

   # Finalise account setup
   # NB sudo costs us 1 second here, could save it by checking the
   # json file
   sudo kano-init finalise || FIRST_BOOT=0

   track_startup

   if [ "$FIRST_BOOT" -eq 1 ] ; then
       # Finalise account setup
       logger --id --tag "info" "kano-uixinit first boot"
       sudo kano-updater first-boot
   fi

fi

# Track some information about the hardware used
kano-tracker-ctl generate hw-info

# Disable XServer screen saver time and screen blanking (The display would become black)
if [ -n "`which xset`" ]; then
    xset s off
    xset -dpms
    xset s noblank
fi

# detect kano-keyboard
kano_keyboard=`python -c "from kano.utils import detect_kano_keyboard; print detect_kano_keyboard()"`

# loads and sets the keyboard layout
set_keyboard $kano_keyboard

# Calibrates the mouse pointer speed
/usr/bin/startmouse

# Set the initial default volume
if [ -e /etc/init.d/alsa-utils ]; then
    amixer -c 0 -- sset PCM 0 &> /dev/null
    ret_val_pcm="$?"

    amixer -c 0 -- sset Master 6 &> /dev/null
    ret_val_master="$?"

    if [ "$ret_val_pcm" -ne 0 ] || [ "$ret_val_master" -ne 0 ]; then
	logger --id --tag "warn" "Failed to set initial volume level, ret code: $ret_val"
    fi
else
    logger --id --tag "warn" "alsa-utils not found, volume not set"
fi

# TODO: move me to a systemd unit service
# Are we in Noobs ? (check for more than 2 partitions)
# If in noobs, make an xrefresh happen after 50 seconds
if [ $( lsblk -n | wc -l ) -gt 3 ] ; then
    (sleep  50; xrefresh ) &
fi

# if xrefresh is still waiting to run, stop it
kill %?xrefresh

# TODO: move me to a systemd unit service
if [ "$FIRST_BOOT" -eq 1 ]; then
    # regenerating ssh keys
    if [ `getent group kanousers | wc -l` -eq 1 ]; then
        sudo regenerate-ssh-keys &
    fi
fi

# load compositor if the new driver is running
(xdriinfo | grep vc4 ) && xcompmgr &

# LXPanel resets the volume level to 100, we need it to be restored to
# whatever level it was before shutdown or reboot
if [ -e /lib/systemd/system/alsa-restore.service ]; then
    # Redirect both stderr and stdout to null, we can do our own logging
    sudo systemctl start alsa-restore &> /dev/null
    ret_val="$?"
    if [ "$ret_val" -ne 0 ]; then
        logger --id --tag "warn" "Failed to restore volume level, ret code: $ret_val"
    else
	logger --id --tag "info" "Audio volume level was successfully restored"
    fi
else
    logger --id --tag "warn" "alsa-restore not found, cannott attempt to restore volume level"
fi

# Remove Homedir "Desktop" folder created by:
# /usr/share/xsessions/lightdm-xsession.desktop
rm -rf  ~/Desktop

logger --id --tag "info" "kano-uixinit-systemd terminated"
